{"meta":{"title":"Zecx","subtitle":"","description":"","author":"Zecx","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"《游戏数值战斗设计》笔记","slug":"《游戏数值战斗设计》笔记","date":"2021-08-19T17:06:04.000Z","updated":"2021-08-20T17:36:21.487Z","comments":true,"path":"2021/08/20/《游戏数值战斗设计》笔记/","link":"","permalink":"http://example.com/2021/08/20/%E3%80%8A%E6%B8%B8%E6%88%8F%E6%95%B0%E5%80%BC%E6%88%98%E6%96%97%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AC%94%E8%AE%B0/","excerpt":"","text":"角色的一二级属性游戏中一般角色的属性分一级和二级属性，以常规MMORPG为案例，一级属性如下。·力量：能够增加角色的物理攻击力、物理防御力、生命值。·智力：能够增加角色的魔法攻击力、魔法防御力、魔法值。·敏捷：能够增加角色的命中、闪避。·精神：能够增加角色的暴击、抗暴击。·体质：能够增加角色的生命值、物理防御力、魔法防御力。再来看下二级属性。·生命值：衡量角色目前健康情况的数值，生命值的当前值小于等于0后玩家会死亡。·魔法值：角色释放技能的消耗数值，魔法值的当前值小于技能消耗数值则不能释放技能。·物攻：攻击结算的一种类型，对应物防来结算。·物防：防御结算的一种类型，对应物攻来结算。·魔攻：攻击结算的一种类型，对应魔防来结算。·魔防：防御结算的一种类型，对应魔攻来结算。·命中：衡量玩家击中目标的判断数值，对应闪避来结算。·闪避：衡量玩家躲避攻击的判断数值，对应命中来结算。·暴击：衡量玩家攻击产生暴击情况的判断数值，对应抗暴击来结算。·抗暴击：衡量玩家抵抗暴击情况的判断数值，对应暴击来结算。 属性 物攻 物防 魔攻 魔防 生命值 魔法值 命中 闪避 暴击 抗暴击 力量 1 0.4 2 智力 1.1 0.45 1 敏捷 0.02 0.02 精神 0.02 0.02 体质 0.6 0.6 16 如果想让游戏各属性对职业的价值是不同的，那么这个系数表就要根据不同职业来填写多张。 在设计的时候，需要用一个标准人来做参考，不同的职业在标准人的数值上分化来体现职业的差异。比如说战士的血量是标准人的120%，刺客是100%，法师是95%。 这里我们来看《魔兽世界》的例子，关于攻击力（AttackPower，下文简称AP）的计算公式如下。猎人/盗贼：AP=角色等级×2+力量+敏捷-20战士/圣骑士：AP=角色等级×3+力量×2-20萨满：AP=角色等级×2+力量×2-20德鲁伊：AP=力量×2-20法师/牧师/术士：AP=力量-10可以观察到，肉搏职业受到角色等级加成最多，然后是敏捷职业，最后是法系职业。敏捷职业会额外再受到敏捷的加成。这就会让玩家在考虑增加自己攻击力的时候考虑针对自己主要的一级属性进行提升。 在人物攻击时，有的角色是有攻击前摇的，这样的攻击可以被打断，而没有前摇的就算打断了，被攻击方还是会受到伤害。 在产生攻击判定时，有两种常见的计算方式，一种是顺序判定，一种是圆桌判定。 顺序判定的缺点是判定顺序靠后的属性在后期收益太低，这也是为什么很多国产游戏等级高了之后大家都喜欢堆闪避，因为它判定优先级高。 顺序判定的优点是在改变一种属性值时，维持其他属性值对结果影响的比例。比如说命中从80%降到20%，暴击维持10%，那么最后产生暴击的概率也差不多减少了四分之三。 圆桌判定的好处是在调整一项数值时，别的属性收益不受影响。坏处是总数值超出100%时，会出现极端情况。 攻击、命中、闪避与暴击命中与闪避 命中与闪避可以用加减法计算，也可以用 命中/(命中+闪避）的方式计算，用加减法计算需要设置最低和最高的命中率，且 到一定的值之后命中的收益会变成0，不是很常用。 攻击三公式 攻击与防御可以用减法来计算，如果防御超额则让攻击在1%到10%之间浮动，这样子可以让玩家不至于打出一大堆1 减法有一个好处就是数值敏感，玩家对自己提升的攻击力有非常直观的感受 除法计算攻击的公式如下 伤害=攻击×（1伤害减免百分比），其中伤害减免百分比=护甲/（护甲+人物等级×K1+K2）K1、K2为系数。 这个公式的模型就像一个浓度公式一样。如果没有任何影响，浓度是100%，一旦在分母中加入数字，将不会维持浓度100%。 人物等级×K1就像每次升级都往里面注水一样，你要通过更多的护甲来把伤害减免百分比维持在原来的数值。而你需要什么样的稀释比例是通过系数K2去调节的。目前运用此类型的游戏以《 还有一种通用的公式是 伤害=（攻击×参数1+参数2）/（攻击+防御×参数3+参数4）。这种相比于上一种更强调攻击而不是防御 暴击 暴击率=K1×（暴击等级/（暴击等级+K2×人物等级+K3）），这样子可以让玩家在升级的时候需要用更好的装备来提供更多的暴击率以维持同样的暴击率 暴击公式：暴击伤害=普通伤害×（1+伤害暴击系数+特殊效果系数）+暴击后附加伤害 特殊效果系数泛指技能、装备以及其他可能影响暴击伤害倍率的系数。比如《英雄联盟》中有“无尽之刃”，装备效果是增加暴击伤害的倍数。另外有些游戏中技能也可以增加这个参数。 技能设计一般会设计3个左右的输出技能。 第一个攻击增幅一般，CD较短，这个技能的主要目的是用于给玩家平时杀怪时增加输出。 第二个是大幅度增加输出，但CD会很长，合理地运用这个技能的释放时机可以在短时间内秒杀更强大的怪物，这个技能的主要目的是让玩家掌握好CD和技能输出的时机。 第三个是范围伤害技能，论攻击能力可能还不如普通攻击，但是这个技能可以进行范围攻击，非常适合于杀怪升级。 第一个技能一般会将DPS效果提升10%～100%，附加攻击要看具体情况衡量。这个技能是最为基础的增加输出能力的技能，它往往也是性价比最高的技能。 第二个技能的效果提升范围因游戏不同会有差异，具体范围不好评估。给玩家的体验是使用该技能造成的攻击非常可观，怪物血量会有明显减少。 第三个范围攻击技能一般DPS会在普攻DPS的60%～120%。另外攻击之后还要看是否附带其他功能性技能，有功能性的攻击DPS肯定会低一些。 控制类技能分为硬控和软控。 硬控是指攻击方可以非常稳定地控制目标，被攻击目标在被控制后不能进行任何行动。除去硬控之外的控制技能就是软控。例如，击晕目标就是典型的硬控，减速等就是软控。 软控的价值衡量和之前的范围性攻击的技能有些类似，我们会参照普通攻击能力折算一个系数算出该技能的DPS。硬控技能可以说是游戏中最难衡量价值的一类技能。这类技能收益巨大，一旦成功会使得在晕住对方的这段时间内敌方完全没有输出。在设计硬控技能的时候要考虑更多策略层面的问题。 首先要判断我们的游戏是否希望出现超级玩家，如果希望出现超级玩家，那么最好不要做硬控。因为一旦有硬控，普通玩家可以通过轮流控制来无限控制超级玩家（ 加血是按职业来划分的，有一个系数，然后和这个等级的DPS对比得出一个系数，最终集合两个系数得出加血应该有的数值。比如牧师职业治疗能力系数为2，DPS对应系数为0.7，那么牧师的治疗量应该等于目前DPS的1.4倍。这样设计在装备差不多的情况下，击杀牧师是很难做到的一件事。这本身也是我们赋予牧师职业的一种职业特性，牧师在拥有强大的治疗能力时进攻能力弱。 装备最早期的MMORPG在属性及其周边系统上的设计没有现在这么丰富，玩家的追求点都集中在装备上，而单一的装备设计势必满足不了这种需求。所以设计人员会把一个装备设计为多种类型，甚至某些游戏的装备属性是随机生成的，这样的装备丰富多样。反观近年来的游戏就少有这样的设计了，因为现在的游戏可以提升属性的系统比之前多了很多。我们更希望玩家尽快拿到自己心仪的武器之后对其进行更深入的培养。换个角度来说，之前的游戏乐趣是让玩家不断刷装备的乐趣，现在的游戏乐趣是拿到装备后的培养乐趣。 随机掉落1.计数随机在早期游戏中，有些道具的掉落是和怪物被击杀的次数相关的，通常在成千上万次的击杀后掉落某些物品。如果玩家并不是特别细心的话是发现不了这种计数式掉落的。这种做法的好处是只要玩家杀到一定数量的怪物是肯定可以得到回报的，但缺点是这种做法一旦被玩家发现之后，玩家会利用这个设计。比如升级装备，玩家会先用一些不好的装备来升级，最后在快要成功的时候，换上自己真正想要升级的装备。而且一旦有几个玩家发现这个做法，那这个技巧就会被快速传播，然后对经济产耗形成巨大冲击。这种设计在单机游戏中更为多见。而目前市面上的游戏多数都不采用这种设计方法了。 2.逐个百分比掉落在早期的MMORPG中，道具的物品种类并没有那么丰富，往往从怪物身上掉落的物品不会超过5种（此处是种类不是数量）。这时候比较流行的掉落方式是逐个百分比掉落。假设我们有A、B、C、D这4个道具，那么我们会先计算A是否掉落，然后计算A掉落的数量，再计算B是否掉落以及掉落的数量，直到所有道具循环完毕。看下实例，先设置概率最大掉落、最小掉落的数量。 3.权重掉落组式掉落由逐个百分比掉落引出的问题是无法配置精确的组合，权重式设计的优点在于你可以灵活地组合各种子集，从而形成一个非常丰富的掉落组合，并且不管是任何系统关联的掉落都可以只用一个母集的编号来对应。这对程序维护成本和程序效率是大有帮助的。缺点是母集和子集之间关联性强，容易出现数据问题，对数值本身要求较高。 4.进阶掉落权重掉落组式掉落是目前较为主流的做法，但随着游戏的不断发展，我们遇到了新的问题。比如某玩家想要获得某关键武器A，可是他的运气十分差，在多次击杀相关BOSS之后就是不掉落武器A。玩家十分恼怒，并最终打电话向客服投诉（非常真实的案例）。客服反馈了这个问题，但权重掉落组式掉落中数值策划是无法控制某物品必然掉落的，此时我们就结合计数掉落设计出了进阶掉落方式来解决这个问题。进阶掉落其实是在权重掉落组式掉落的基础上做了进化的版本，核心思想还是一样的，它多了一步前置判断，在每次母集掉落之前会判断一次母集是否满足一定条件并产生进阶掉落。 5.木桶原理掉落木桶原理：一个水桶无论有多高，它盛水的高度取决于其中最低的那块木板。在游戏中玩家会遇到非常多的道具，可往往自己心里想要得到的道具总也不掉落。木桶原理掉落就是用来解决这个问题的，木桶原理掉落让你最短缺的道具有更高的掉落概率。 战斗系统中随机的运用以传统MMORPG来说，战斗系统会在如下的情况下运用到随机。 决定闪避用到的随机值。 决定暴击用到的随机值。 决定攻击从上限到下限的随机值。一般以上情况用的都是系统自带的随机数，但有些游戏会将第3种随机值做一定处理。因为某些游戏的攻击范围较大，设计者不希望让玩家的攻击输出变得特别不稳定。具体实现方式也是比较简单的，我们将攻击的结果进行多次随机取值并且取其平均值，但次数也不宜过多，一般取3～5次。这样所得的结果比随机一次要平滑很多。 用1次平均值的方法，我们有更大机会击杀生命值高的怪物，但击杀生命值低的怪物则要用相对更多的次数。5次平均值则相反。从设计角度讲，我们希望玩家能更稳定地击杀生命值低的怪物，而面对生命值高的怪物时，玩家应该消耗更多的攻击次数来完成击杀。 怪物掉落怪物掉落一般使用的是进阶掉落，但也不是所有子集都进阶。首先，我们要规划所有的子集类型。举例进行说明。1.货币子集。这个子集是控制掉落货币的子集。怪物掉落的货币一般来说是不会有很大波动的，我们可以通过这个掉落来算出每个怪物的产出货币量，最终控制总产出符合我们的预期。这个货币子集可能根据怪物类型不同而不同。比如有些游戏人形生物掉落货币会比动物多，有些游戏动物、植物甚至是不掉落货币的。2.垃圾材料子集。早期游戏会有这样的设计，这类材料除了兑换货币之外没有任何作用。为什么会有这类设计，是因为当年的设计者希望通过这种丰富的材料产出来刺激玩家对自己背包空间的追求。这种垃圾材料对于掉落的意义从本质上说和货币子集是一样的，最终都是折算成货币的产出来衡量。3.材料子集。这里的材料包含普通材料和宝石等。如果有特殊需要，材料子集也可以分为多个子集。我们会根据材料的稀缺性来决定产出的量级，并且不会让玩家轻易获得珍稀材料。4.装备子集。装备子集是玩家非常在意的一个掉落子集。一般情况下，我们会给玩家投放一些基础装备，让他们可以通过日常杀怪获得这些装备。稀有装备有严格的进阶掉落控制，玩家可以在击杀一定量的怪物后获得一件稀有装备。这样可以保证在一定时间内给玩家一个较大的收获，刺激玩家继续杀怪。 原书为：似水无痕. 平衡掌控者游戏数值战斗设计 (Chinese Edition) (Kindle Location 3875). 电子工业出版社.","categories":[{"name":"Game","slug":"Game","permalink":"http://example.com/categories/Game/"}],"tags":[{"name":"Note","slug":"Note","permalink":"http://example.com/tags/Note/"},{"name":"Game Design","slug":"Game-Design","permalink":"http://example.com/tags/Game-Design/"}]},{"title":"Unreal Engine Notes","slug":"Unreal-Engine-Notes","date":"2021-08-19T17:05:22.000Z","updated":"2021-08-19T17:07:20.248Z","comments":true,"path":"2021/08/20/Unreal-Engine-Notes/","link":"","permalink":"http://example.com/2021/08/20/Unreal-Engine-Notes/","excerpt":"","text":"","categories":[{"name":"Game","slug":"Game","permalink":"http://example.com/categories/Game/"}],"tags":[{"name":"Note","slug":"Note","permalink":"http://example.com/tags/Note/"},{"name":"Game Design","slug":"Game-Design","permalink":"http://example.com/tags/Game-Design/"}]},{"title":"Unity Study Notes","slug":"Unity-Study-Notes","date":"2021-08-18T11:36:22.000Z","updated":"2021-08-18T15:04:22.047Z","comments":true,"path":"2021/08/18/Unity-Study-Notes/","link":"","permalink":"http://example.com/2021/08/18/Unity-Study-Notes/","excerpt":"","text":"2D Game 加入素材后要记得修改pixel per unit 背景可以拖到场景中，但是角色不建议这么做。因为角色后期可能会频繁的切换，创建一个Spirite然后置入component中更有灵活性 Sprite的刚体加Rigidbody2D，碰撞加Collider2D。Tilemap的碰撞加Tilemap Collider2D，会自动给每一个格子加碰撞体积 做人物移动的时候不要写 if(horizontalMove !=0) 这行判断命令，会导致人物滑动无法停止。","categories":[{"name":"Game","slug":"Game","permalink":"http://example.com/categories/Game/"}],"tags":[{"name":"Note","slug":"Note","permalink":"http://example.com/tags/Note/"},{"name":"Game Design","slug":"Game-Design","permalink":"http://example.com/tags/Game-Design/"}]},{"title":"Game Maker's Toolkit笔记","slug":"Game-Maker-s-Toolkit笔记","date":"2021-08-18T09:52:56.000Z","updated":"2021-08-18T15:00:00.122Z","comments":true,"path":"2021/08/18/Game-Maker-s-Toolkit笔记/","link":"","permalink":"http://example.com/2021/08/18/Game-Maker-s-Toolkit%E7%AC%94%E8%AE%B0/","excerpt":"Deconstructing Ori and the Blind Forest’s Best Bit 需要大量重试的游戏在复活的时候尽量不要读条，会打断沉浸感。 需要大量重试的游戏在复活的时候不要断BGM（例如Celeste和奥日)，让玩家觉得失败是被设计好的一部分。 在最终挑战中如果不设计中途存档点（奥日最终水位上涨的BOSS大逃亡），在难度不过分的前提下可以提升玩家的成就感。 不要在游戏中设计过多的能力，对玩家是心智负担（奥日）。 类恶魔城的地图设计有时候会让回头路过多，设计得精巧容易让玩家有重复感。","text":"Deconstructing Ori and the Blind Forest’s Best Bit 需要大量重试的游戏在复活的时候尽量不要读条，会打断沉浸感。 需要大量重试的游戏在复活的时候不要断BGM（例如Celeste和奥日)，让玩家觉得失败是被设计好的一部分。 在最终挑战中如果不设计中途存档点（奥日最终水位上涨的BOSS大逃亡），在难度不过分的前提下可以提升玩家的成就感。 不要在游戏中设计过多的能力，对玩家是心智负担（奥日）。 类恶魔城的地图设计有时候会让回头路过多，设计得精巧容易让玩家有重复感。 Depth, Mastery, and Vanquish 好的游戏通过让不同水平的玩家都能获得乐趣而拥有较长的寿命。 白金工作室的游戏新手和大师的游玩体验有很大的区分度。主要体现在玩家是否能通过游玩的过程来表达自己。 Vanguish在这方面不太好，因为大师和新手在玩起来的时候，看起来差不多。而且它的分数没有rank系统，对玩家没有实际意义。 COD Online中换弹时切近战可以加速换弹，看起来像是一个bug，但是玩家会让它解读成一个进阶技巧。 Secrets of Game Feel and Juice“真正好的游戏在去掉了许许多多的元素之后还是耐玩的。”有“爽感”是这些好游戏的核心。《Super Mario》哪怕你把游戏中所有的元素去去掉，只留下主角，这游戏仍然会让人觉得十分有趣。因为操作Mario本身就是一种快乐的体验。宫本茂在设计游戏之初，花了数个月来调整Mario的摩擦力、运动模式等等，而后续的游戏内容都是为了让玩家可以更好地体验Mario而设计的。那么《Super Mario》的爽点其实就在于控制Mario。 很多游戏有自己的方式来给玩家提供“爽感”。例如Vlambeer最擅长的是“屏幕振动”。在打击到敌人时，它家的游戏常有画面振动且停顿数帧的效果，让人觉得“爽感”爆棚。（类似的设计在《塞尔达传说》中也有）在击杀敌人时爆血（《Hotline Miami》）、在Combo时游戏音调不断升高（《桌面弹珠》/《Super Mario》）也是不错的选择。 Half-Life 2’s Invisible Tutorial游戏教程可以有很多种呈现方式。《死亡空间》选择了在墙上用大量的血写下教程的文字，并在用NPC的剧情对话反复告诉玩家应该攻击敌人的四肢。但这么做玩家可能会觉得教程过于烦琐。 《半条命2》没有选择这么做。在教学玩家用电锯攻击僵尸时，玩家会在一间屋子看到被电锯切断的僵尸尸体，并在随后拿起电锯时正面出现一个僵尸。如果玩家自然而然地释放电锯，就会看到僵尸被一刀两断。 这么做没有用到任何文字与对话，而是让玩家“领悟”了教程的内容。 在面对天花板上吞食路过物体的怪物时，《半条命2》先选择让玩家在路过一处时“偶然”看到怪物吞下了一只鸟，让玩家“领悟”到这个怪物是危险的，会通过这样的方式来攻击。 随后在玩家路过一处下坡时，需要推开一些障碍物来前进。这些障碍物恰好会通过下坡滚到怪物的口下，并被怪物吞食。玩家又可以通过这一点“领悟”到可以通过这种方式来吸引怪物的注意。 而当之后玩家面对一大群怪物时，看到周围的爆炸桶，想必所有人都知道该怎么做了。 《半条命2》的通用做法是，初见某种敌人时让玩家可以在一个相对安全的区域观察到敌人的行为模式。 例如玩家会在栅栏后看到第一个僵尸，会在防墙墙后第一次看到会爆炸的敌人等等。随后在一个可以重复尝试的地方让玩家练习如何解决这些敌人。 Theme and Mechanics in Far Cry 2 and Far Cry 4孤岛惊魂2与4都是在讲进入一个危险区域去解决一个危险人物的游戏故事。游戏的主体内容就是通过驾驶车、船并使用各种枪械去到达目的地并解决目标。但是游玩4更像是在一个游乐园里玩耍，而游玩2则像是在一片废土上挣扎。 两者的游戏内容非常“像”，玩家的体验却完全不一样。这是因为两者的游戏机制有许许多多的差异，以至于这两作根本就不像是一个系列的游戏。 在2中，玩家使用的枪上带满了锈，在射击过程中会卡弹，子弹少且好枪的获取难度高；驾驶的车辆会抛锚，需要玩家停车修理——而在这过程中玩家可能会受到敌对NPC的攻击；玩家可能会得疟疾，如果不吃药就会有危险；地图需要在游戏中获取，而不是像现在的许多游戏一样出生自带地图。最最关键的，在2中玩家只有在存档点可以存档，所以如果玩家死亡了，他将要面对的是半小时甚至几小时的游戏进度丢失。这将会让玩家的行动异常谨慎。而游玩4的时候，玩家可以坦然的面对游戏中的死亡，游戏进度的损失不过几分钟。 Sequence Breaking with Toki Tori 2类银河战士恶魔城游戏（英语：Metroidvania game，简称“银河恶魔城”或“银河城”），是动作冒险游戏的一个子分类，指玩法类似于银河战士系列和部分恶魔城系列（特别是《恶魔城X 月下夜想曲》及之后发布于任天堂掌机平台的系列）的游戏。该分类的名字是将两个系列的名字混合而成。 银河恶魔城游戏中通常有可供玩家探索的大型相连世界地图，但是进入地图某处的特定地点往往会有门或其他障碍物限制玩家，只有当玩家在游戏中获得特殊道具、工具、武器或能力后才能通过。 因此，在银河恶魔城游戏中玩家通常需要走大量的回头路。但是这在一定程度上限制了玩家进入不同区域的顺序与时间。 Toki Tori 2在地图设计上采取了银河恶魔城游戏的风格，但是没有对各种区域作进入门槛的“能力限制”。 进入不同区域主要依赖玩家对区域入口的解谜知识的了解。一般情况下，玩家会在游戏进行到一定程度后学习到特定的知识，从而进入原先“去不了”的地方。但是如果玩家通过反复的尝试与猜测，也有可能“猜”到这些知识从而没有按照游戏设计师预先设计好的顺序来游戏。 对大部分银河恶魔城游戏来说，这么做应该是不可行的。因为这类游戏大多有等级/装备系统，而过早的进入“不该进入”的区域，将会给玩家带来不必要的考验。 Adaptive Soundtracks in Games 在游戏中随着场景的切换改变音乐可以提升体验。常见的做法是UNCHARTED中那样进入战斗时音乐变得紧张，结束时音乐切换回去。 塞尔达传说和Super Mario使用了更高级的做法：同一种音乐用不同的乐器演奏，随着场景的变化旋律不变，但是音乐的元素发生变化。一个比较好的例子是《塞尔达传说：灵魂轨迹》中的灵魂之塔与《御天之剑》中的商店。 可选的做法是在场景进行小变化的时候改变音乐的高低调或者节奏快慢（如潜水后给音乐降调，让音乐听起来更沉闷；马车8进入最后一圈时音乐变快） 解谜类的游戏可以通过让音乐的变化提示玩家是否走在了正确的路上（如LA Noire与Auditorium）","categories":[{"name":"Game","slug":"Game","permalink":"http://example.com/categories/Game/"}],"tags":[{"name":"Note","slug":"Note","permalink":"http://example.com/tags/Note/"},{"name":"Game Design","slug":"Game-Design","permalink":"http://example.com/tags/Game-Design/"}]}],"categories":[{"name":"Game","slug":"Game","permalink":"http://example.com/categories/Game/"}],"tags":[{"name":"Note","slug":"Note","permalink":"http://example.com/tags/Note/"},{"name":"Game Design","slug":"Game-Design","permalink":"http://example.com/tags/Game-Design/"}]}